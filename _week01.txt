2may impact Training
 

JAVA 

* Java is a **high-level, object-oriented, platform-independent language** developed by Sun Microsystems.
* Understood the concept of **"Write Once, Run Anywhere" (WORA)** due to Java‚Äôs platform independence.
* Wrote and executed a simple Java program using the `main()` method:

```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

  Class declaration**
  Main method**
  Statements and Syntax**

 Explored **primitive data types** (`int`, `float`, `char`, `boolean`, etc.) and how to declare variables.



* Practiced writing basic Java programs using different data types and print statements.
* Completed exercises using variables, input/output, and operators.



Scanner - class
sc - object
new  Scanner(System.in)- we make reference while run time .while making the reference default method called.
println -next line 
printf()- formatted string ,args

Formated string 
%d - decimal
%f - float
%lf - double 
%e - exponential
%s - string
%S - uppercase string
%o- octal
%x - hexadecimal
%b - Boolean

-precision says by default 6 digit number after decimal
*Escape sequence: used to change the flow of output, sequence character not      printed , but it can change  the flow of output.

-Data Types
.primitive
*integer types
-byte(8bits)
-short(2)
-int(4)
-long(8)

*floating point numbers 
-float(4)
-double(8)

*char type
-char(2)

*Boolean - true,false


.non-primitive

TYPE CONVERSION
____________________________
-WIDENING:lower to higher type(implicit means automatically)
-NARROWING:higher to lower type(explicit means manually)
______________________________________________________________________________________________________________________________________________________________
üìÖ Day 1 - Control Statements & Switch Statements
‚úÖ Topics Covered:
Control Flow in Java

if, if-else, if-else-if Ladder

switch Statement

Comparison between if-else and switch

üí° Key Concepts
üîπ Control Statements in Java
Control statements are used to alter the flow of execution in a program based on conditions. They help implement decision-making and looping behavior.

Types:
Conditional/Decision-making statements ‚Äì if, if-else, switch

Looping statements ‚Äì for, while, do-while (covered later)

int num = 10;
if (num > 0) {
    System.out.println("Positive");
} else if (num < 0) {
    System.out.println("Negative");
} else {
    System.out.println("Zero");
}
Why used? To perform different actions based on varying logical conditions


.....import java.util.Scanner;

public class TrendyNumberChecker {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Input: an integer n
        System.out.print("Enter a number: ");
        int n = sc.nextInt();

        // Check if it's a 3-digit number
        if (n >= 100 && n <= 999) {
            int middleDigit = (n / 10) % 10;  // Extract the middle digit
            
            if (middleDigit % 3 == 0) {
                System.out.println(n + " is a Trendy Number.");
            } else {
                System.out.println(n + " is Not a Trendy Number.");
            }
        } else {
            System.out.println("Not a 3-digit number, hence not a Trendy Number.");
        }

        sc.close();
    }
}




....import java.util.Scanner;

public class WeirdOrNot {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        if (n % 2 != 0) {
            System.out.println("Weird");
        } else {
            if (n >= 2 && n <= 5) {
                System.out.println("Not Weird");
            } else if (n >= 6 && n <= 20) {
                System.out.println("Weird");
            } else if (n > 20) {
                System.out.println("Not Weird");
            }
        }
    }
}

_____________________________________________________________________________________________________

üìÖ Day 2 - Looping in Java
‚úÖ Topics Covered:
Introduction to Loops

for Loop

while Loop

do-while Loop

üí° Key Concepts
üîπ What is Looping?
Looping in Java allows us to execute a block of code repeatedly until a certain condition is met. It is useful for tasks like traversing arrays, repeating tasks, or performing iterations.

üîÅ Types of Loops
1. for Loop
Used when the number of iterations is known.

java
Copy
Edit
for (int i = 1; i <= 5; i++) {
    System.out.println("Count: " + i);
}

2. while Loop
Used when the condition is checked before each iteration and we don‚Äôt necessarily know how many times it will run.

java
Copy
Edit
int i = 1;
while (i <= 5) {
    System.out.println("Count: " + i);
    i++;
}

3. do-while Loop
Executes the code at least once, and then continues looping while the condition is true.

java
Copy
Edit
int i = 1;
do {
    System.out.println("Count: " + i);
    i++;
} while (i <= 5);


Q.write program to calculate the hotel tarrif .the room rent is 20% high during peak seasons april-june and nov- dec..   the first input  integer denote the count of the month the second input integer denote room rent per dat. the third input integr denote the nmber of days stayed in hotel  . output (print the hotel tariff to be piad ) java code  this is the hacker rank  contest - fundamentals of programming question answer accordingly.


Hotel Tariff Calculator

Write a  program to calculate the hotel tariff. The room rent is 20% high during peak seasons [April-June, November-December] .

Input Format:

The first line of the input contains an integer which corresponds to the number of the month. [ January is 1, Feb is 2 and so on].  

The second line of the input consists of a floating point number which corresponds to the room rent per day. 

The third line of the input consists of an integer which corresponds to the number of days stayed in the hotel.

Output Format:

Output consists of a single line which displays the hotel tariff to be payed.  

Hotel tariff should be displayed correct to 2 decimal places. 

Refer  sample output  for format details.

Sample Input 1:

3

1500

2

Sample Output 1:

Hotel Tariff: Rs.3000.00

Sample Input 2:

4

2000

2

Sample Output 2:

Hotel Tariff: Rs.4800.00

import java.util.Scanner;
public class Hotel
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        float b=sc.nextFloat();
        int c=sc.nextInt();
        if(a==4 ||a==6||a==11||a==12)
        {
            float d=20*b/100;
            float e=12*d;
            System.out.printf("Hotel Tariff:Rs.%.2f",e);
        }
        else if(a>12)
        {
            System.out.println("Invalid Input");
        }
        else
        {
            System.out.printf("Hotel Tariff:Rs.%.2f",b*c);
        }
    }
}


------------------------------------------------------------------------------------
PRINT EVEN AND ODD SUM

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int n = sc.nextInt();

        int evenSum = 0, oddSum = 0;

        while (n > 0) {
            int digit = n % 10;

            if (digit % 2 == 0) {
                evenSum += digit;
            } else {
                oddSum += digit;
            }

            n /= 10;
        }

        System.out.println("Even sum: " + evenSum);
        System.out.println("Odd sum: " + oddSum);

        sc.close();
    }
}


-------------------------------------------------------------------------------
Given a number num and a divisor m, print the nearest number less than or equal to num that is divisible by m.

import java.util.Scanner;
class Main{
    public static void main(String[] args) 
    {

        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number: ");
        int num = sc.nextInt();

        System.out.print("Enter the divisor (m): ");
        int m = sc.nextInt();

        if (m == 0) {
            System.out.println("Divisor cannot be zero.");
        } else {
            int result = num - (num % m);
            System.out.println("Nearest divisible number: " + result);
        }

        sc.close();
    }
}



                    OR
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the number and divisor
        System.out.print("Enter the number: ");
        int num = sc.nextInt();

        System.out.print("Enter the divisor (m): ");
        int m = sc.nextInt();

        if (m == 0) {
            System.out.println("Divisor cannot be zero.");
            return;
        }

       
        if (num % m == 0) {
            System.out.println("Nearest divisible number: " + num);
        } else {
            
            int lowerb = num - (num % m);
            int upperb = lowerb + m;

            if ((num - lowerb) <= (upperb - num)) {
                System.out.println("Nearest divisible number: " + lowerb);
            } else {
                System.out.println("Nearest divisible number: " + upperb);
            }
        }

        sc.close();
    }
}
---------------------------------------------------------------------------------------------------


find the sum of digits  of a number until the number becomes single digit  write a program ,input is a number, output consist of an integer
import java.util.Scanner;

public class DigitSumUntilSingleDigit {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter a number: ");
        int num = sc.nextInt();

        while (num >= 10) {
            int sum = 0;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            num = sum;
        }

        System.out.println(num);  // Final single-digit result

        sc.close();
    }
}







------------------------------------------------------------------------------------------------------
Adam num  the square of the given num is is equal to the reverse of the sqare of the reverse of the given number find the square of the number ,find revrese of the  number,then find square of the reverse number then find the sqaure of the reversed number then print this is the adam number.




import java.util.Scanner;

public class AdamNumber {

    // Method to reverse a number
    public static int reverse(int num) {
        int rev = 0;
        while (num > 0) {
            rev = rev * 10 + (num % 10);
            num /= 10;
        }
        return rev;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        int square = num * num;
        int reversedNum = reverse(num);
        int reversedSquare = reversedNum * reversedNum;
        int reversedSquareOfReversed = reverse(reversedSquare);

        System.out.println("Original number: " + num);
        System.out.println("Square of the number: " + square);
        System.out.println("Reverse of the number: " + reversedNum);
        System.out.println("Square of reversed number: " + reversedSquare);
        System.out.println("Reverse of square of reversed number: " + reversedSquareOfReversed);

        if (square == reversedSquareOfReversed) {
            System.out.println(num + " is an Adam Number.");
        } else {
            System.out.println(num + " is NOT an Adam Number.");
        }

        scanner.close();
    }
}
_____________________________________________________________________________________________________
üìÖDay 3 - Digit Manipulation & Nested Loops (Patterns)
‚úÖ Topics Covered:
Extracting digits from a number

Reversing a number

Checking for palindrome

Using nested loops to print patterns

Logic building with loops

üí° Key Concepts
üî¢ Digit Manipulation
Digit manipulation involves breaking down a number into its individual digits using modulus (%) and division (/) operations.

Example: Reversing a Number

java
Copy
Edit
int num = 1234, reverse = 0;
while (num != 0) {
    int digit = num % 10;
    reverse = reverse * 10 + digit;
    num = num / 10;
}
System.out.println("Reversed Number: " + reverse);
Example: Palindrome Check

java
Copy
Edit
int original = 121, temp = original, reverse = 0;
while (temp != 0) {
    int digit = temp % 10;
    reverse = reverse * 10 + digit;
    temp = temp / 10;
}
if (original == reverse) {
    System.out.println("Palindrome");
} else {
    System.out.println("Not a palindrome");
}



üîÅ Nested Loops & Pattern Printing
Nested loops (a loop inside another loop) are commonly used for printing patterns like triangles, pyramids, and rectangles.

Example 1: Right-Angle Triangle Pattern

java
Copy
Edit
for (int i = 1; i <= 5; i++) {
    for (int j = 1; j <= i; j++) {
        System.out.print("* ");
    }
    System.out.println();
}
Output:

markdown
Copy
Edit
* 
* * 
* * * 
* * * * 
* * * * * 
Example 2: Inverted Number Pyramid

java
Copy
Edit
for (int i = 5; i >= 1; i--) {
    for (int j = 1; j <= i; j++) {
        System.out.print(j + " ");
    }
    System.out.println();
}
Output:

Copy
Edit
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 

Armstrong Number
163=1^3+6^3+3^3=sum
import java.util.Scanner;

public class ArmstrongNumber {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        int originalNum = num;
        int sum = 0;

        // Count number of digits
        int digits = 0;
        int temp = num;
        while (temp > 0) {
            digits++;
            temp /= 10;
        }

        // Calculate sum of digits raised to the power of digits
        temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            sum += (int)Math.pow(digit, digits);  // Cast result of Math.pow to int
            temp /= 10;
        }

        // Check if Armstrong
        if (sum == originalNum) {
            System.out.println(originalNum + " is an Armstrong Number.");
        } else {
            System.out.println(originalNum + " is NOT an Armstrong Number.");
        }

        scanner.close();
    }
}
----------------------------------------------------------------------------------------------



Jaffer wanted to excel in Math. He was learning about the Kaprekar number from Meena, his Maths teacher. She gave him a few random numbers and asked him to find out whether they are Kaprekar number or not.

(Consider an n-digit number k. Square it and add the right n digits to the left n or n-1 digits. If the resultant sum is k, then k is called a Kaprekar number. For example, 9 is a Kaprekar number since 9^2 = 81 & 8 + 1 = 9, similarly, 297 is a Kaprekar number as 297^2 = 88209 & 88 + 209 = 297 ).

Can you help Jaffer to write a program to find whether the given number is a Kaprekar number or not?

Input Format

Input consists of a single integer.

Constraints

NA

Output Format

If the output is a Kaprekar number print "Kaprekar Number" else "Not a Kaprekar Number".

Sample Input 0

45
Sample Output 0

Kaprekar Number
Sample Input 1

23
Sample Output 1

Not a Kaprekar Number



----
import java.util.Scanner;

public class KaprekarNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int num = scanner.nextInt();
        scanner.close();

        int square = num * num;

        // Count digits in original number
        int digits = 0;
        int temp = num;
        while (temp > 0) {
            digits++;
            temp /= 10;
        }

        // Get 10^digits
        int divisor = 1;
        for (int i = 0; i < digits; i++) {
            divisor *= 10;
        }

        int right = square % divisor;
        int left = square / divisor;

        if ((left + right) == num) {
            System.out.println("Kaprekar Number");
        } else {
            System.out.println("Not a Kaprekar Number");
        }
    }
}
A number can be said as a strong number when the sum of the factorial of the individual digits is equal to the number.

For example, 145 is a strong number. 1! + 4! + 5! = 145. Write a program to check whether a given number is a strong number or not.

Input Format

Input consists of 1 integer.

Constraints

NA

Output Format

If it is a strong number print "Yes" or print "No".

Sample Input 0

145
Sample Output 0

Yes
Explanation 0

= 1! + 4! +5! = 1+24+120 = 145



--
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int num = scanner.nextInt();
        int count =0;
        int sq=num*num;
        int temp=num;
        while(num!=0){
            count++;
        }
        int pow=(int) Math.pow(10,count);
        int right=sq % pow;
        int left=sq / pow;
        scanner.close();
        if((left+right)==temp){
            System.out.println("Kaprekar Number");
        } else 
        {
            System.out.println("Not a Kaprekar Number");
        }
        scanner.close();
    }
}

[imp number pattern and type your name questions.]
_____________________________________________________________________________________________________

üìÖ Day 4 ‚Äì 08 May
üß© Patterns & Number Problems
‚úÖ Topics Covered:
Advanced Pattern Printing using nested loops

Number-based logic building

Solving classic number problems using loops and conditions:

Sum of digits

üí° Key Concepts
üîπ Pattern Printing (Advanced)
Example: Number Pyramid Pattern

for (int i = 1; i <= 5; i++) {
    for (int j = 1; j <= i; j++) {
        System.out.print(j + " ");
    }
    System.out.println();
}
Output:

Copy
Edit
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
Example: Floyd‚Äôs Triangle


int num = 1;
for (int i = 1; i <= 4; i++) {
    for (int j = 1; j <= i; j++) {
        System.out.print(num + " ");
        num++;
    }
    System.out.println();
}
Output:

Copy
Edit
1 
2 3 
4 5 6 
7 8 9 10 

üî¢ Number Problems
Sum of Digits:

int num = 1234, sum = 0;
while (num != 0) {
    sum += num % 10;
    num /= 10;
}
System.out.println("Sum: " + sum);


NESTED LOOPS
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number: ");
        int rows = scanner.nextInt();
        scanner.close();

        
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
        
            System.out.println();
        }
    }
}




----import java.util.Scanner;

public class StaircasePattern {
    public static void main(String[] args) {
        int n=4;
        for (int i = 0; i <= n; i++) {
           
            for (int j = 0; j <i; j++) {
                System.out.print(" ");
            }
           
            for (int k = 0; k<n-i;k++) 
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

-----public class Main{
    public static void main(String[] args) {
        int n = 4; 

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
               
                if (i == 1 || i == n || j == 1 || j == n) 
                {
                    System.out.print("* ");
                } 
                else 
                {
                    System.out.print("  "); 
                }
            }
            System.out.println(); 
        }
    }
}


* * * * 
*       * 
*       * 
* * * *



 
-----public class Main{
    public static void main(String[] args) {
        int n = 5; 

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
               
                if (i == 0 || i == n-1 || j == 0|| j == n-1) 
                {
                    System.out.print("* ");
                } 
                else 
                {
                    System.out.print("  "); 
                }
            }
            System.out.println(); 
        }
    }
}
___________________________________________________________________________________________

üìÖ Day 5 ‚Äì Arrays in Java
‚úÖ Topics Covered:
Introduction to Arrays

Declaring, initializing, and accessing array elements

One-dimensional (1D) arrays

Traversing arrays using loops

Basic array operations: sum, max, min, search

üí° Key Concepts
üîπ What is an Array?
An array is a data structure that stores multiple values of the same data type in a single variable. Arrays are used to handle large amounts of data efficiently.

üîπ Declaring and Initializing a 1D Array:

int[] numbers = new int[5];  // declaration
numbers[0] = 10;             // initialization

// or directly
int[] values = {10, 20, 30, 40, 50};
üîπ Traversing an Array:
java
Copy
Edit
for (int i = 0; i < values.length; i++) {
    System.out.println("Element at index " + i + ": " + values[i]);
}

üî¢ Basic Array Operations

Sum of All Elements:
int sum = 0;
for (int i = 0; i < values.length; i++) {
    sum += values[i];
}
System.out.println("Sum = " + sum);


Finding Maximum Element:
int max = values[0];
for (int i = 1; i < values.length; i++) {
    if (values[i] > max)
        max = values[i];
}
System.out.println("Maximum = " + max);
Searching an Element:

java
Copy
Edit
int search = 30, found = -1;
for (int i = 0; i < values.length; i++) {
    if (values[i] == search) {
        found = i;
        break;
    }
}
System.out.println((found != -1) ? "Found at index " + found : "Not found");
üîπ Introduction to 2D Arrays
A two-dimensional array is like a table (rows and columns).

java
Copy
Edit
int[][] matrix = {
    {1, 2},
    {3, 4}
};

// Access element
System.out.println(matrix[0][1]);  // Output: 2

Declared and initialized 1D arrays

Wrote code to find sum, average, and maximum element of an arra
Scanner sc = new Scanner(System.in);
int n =sc.nextInt();
int arr[]=new int[n];
for (int i=0;i<n;i++){
arr[i]= sc.nextInt();
}
for (int i=0;i<n;i++){

}



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i =0;i<n;i++)
        {
            arr[i]=sc.nextInt();
            System.out.print(arr[i]+" ");
        }
    }
    
}
        

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter array size:");
        int n=sc.nextInt();
        int arr[]=new int[n];
        System.out.println("eneter elements:");
        for(int i =0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        int sum=0;
        System.out.println("elements in array:");
        for(int i =0;i<n;i++)
        {
            sum+=arr[i];
            System.out.print(arr[i]+" ");
        }
        System.out.println("sum"+sum);
    }
    
}
---------------------------------------------------------------------------------------
        
The Modern World Cinderella was happy to meet Prince Charming at the ballroom and she danced with him happily. While she was dancing, Prince wanted to check whether Cinderella is a perfect match for him. He asked her a question to check her knowledge of Arrays. Can you help Cinderella to write a program to find whether the two arrays are the same or not?

Note: Two arrays are said to be the same if the sum of both arrays is the same and the size of the arrays is the same.

Input Format

Input consists of 2 integers and 2 arrays. The integers should correspond to the size of the arrays.

Constraints

NA

Output Format

If two arrays are the same, display "Same" else display "Not Same"

Sample Input 0

4
4
1
2
3
4
1
2
3
4
Sample Output 0

Same
Explanation 0

Here, the sum and size of both arrays are the same. Hence it prints "Same".

Sample Input 1

3
3
1
2
1
2
3
6
Sample Output 1

Not Same


--import java.util.Scanner;

public class CompareArrays {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read sizes of both arrays
        int size1 = scanner.nextInt();
        int size2 = scanner.nextInt();

        // Read first array
        int[] arr1 = new int[size1];
        for (int i = 0; i < size1; i++) {
            arr1[i] = scanner.nextInt();
        }

        // Read second array
        int[] arr2 = new int[size2];
        for (int i = 0; i < size2; i++) {
            arr2[i] = scanner.nextInt();
        }

        scanner.close();

        // Check if sizes are same
        if (size1 != size2) {
            System.out.println("Not Same");
            return;
        }

        // Calculate sums
        int sum1 = 0, sum2 = 0;
        for (int i = 0; i < size1; i++) {
            sum1 += arr1[i];
            sum2 += arr2[i];
        }

        // Compare sums
        if (sum1 == sum2) {
            System.out.println("Same");
        } else {
            System.out.println("Not Same");
        }
    }
}


--------------------------------------------------------------------------------------------
Harish and Rajesh were developing a plan to find the ideal woman for Sheldon Cooper. There were puzzles, translations, and questions to check a person's intelligence. One such question was to come up with a program to count the number of distinct elements in an array. Harini is a postdoctoral researcher and a former graduate student of Caltech who is a huge fan of Sheldon's work and she wanted to impress Sheldon by writing a program to count the number of distinct element in an array. Can you help Harini?

Input Format

Input consists of 1 integer and 1 array. The first integer corresponds to the size of the array.

Constraints

NA

Output Format

The output prints the number of distinct element in an array.

Sample Input 0

5
1
2
3
3
4
Sample Output 0

There are 4 distinct element in the array.
Explanation 0

Since there are 4 distinct elements it will print There are 4 distinct element in the array.

Sample Input 1

5
1
1
2
3
3
Sample Output 1

There are 3 distinct element in the array.


--import java.util.Scanner;

public class DistinctElements {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read size of array
        int n = scanner.nextInt();
        int[] arr = new int[n];

        // Read array elements
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        scanner.close();

        // Count distinct elements using simple logic
        int count = 0;

        for (int i = 0; i < n; i++) {
            boolean isDistinct = true;

            // Check if this element has occurred before
            for (int j = 0; j < i; j++) {
                if (arr[i] == arr[j]) {
                    isDistinct = false;
                    break;
                }
            }

            if (isDistinct) {
                count++;
            }
        }

        // Output result
        System.out.println("There are " + count + " distinct element in the array.");
    }
}

[sort an array without using  a in built  method.]

----------------------------------------------------------------------

Two arrays are said to be compatible if they are of the same size and if the ith element in the first array is greater than or equal to the ith element in the second array for all the values of i. Write a program to find whether 2 arrays are compatible or not.

Input Format

Input consists of 2n+2 integers. The first integer corresponds to ‚Äòn1‚Äô, the size of the first array. The next ‚Äòn1‚Äô integers correspond to the elements in the first array. The next (n+1) integer corresponds to 'n2', the size of the second array. The last 'n2' integers correspond to the elements in the second array.

Constraints

NA

Output Format

The output is any one of the two strings "Compatible" or "Incompatible"

Sample Input 0

5
2
3
6
8
1
5
1
1
1
1
1
Sample Output 0

Compatible
Sample Input 1

5
2
3
6
8
1
5
1
1
1
1
2
Sample Output 1

Incompatible



--iimport java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read size and elements of arr1
        System.out.println("Enter arr1 size:");
        int n = sc.nextInt();
        int[] arr1 = new int[n];

        System.out.println("Enter elements in arr1:");
        for (int i = 0; i < n; i++) {
            arr1[i] = sc.nextInt();
        }

        // Read size and elements of arr2
        System.out.println("Enter arr2 size:");
        int m = sc.nextInt();
        int[] arr2 = new int[m];

        System.out.println("Enter elements in arr2:");
        for (int i = 0; i < m; i++) {
            arr2[i] = sc.nextInt();
        }

        // Check for compatibility
        if (n != m) {
            System.out.println("Not compatible");
        } else {
            boolean compatible = true;
            for (int i = 0; i < n; i++) {
                if (arr1[i] < arr2[i]) {
                    compatible = false;
                    break;
                }
            }

            if (compatible) {
                System.out.println("Compatible");
            } else {
                System.out.println("Not compatible");
            }
        }

        sc.close();
    }
}

-----------------------
Arjuna and Karna were playing cards. Arjuna has 5 cards. Karna wants to insert a new card in between Arjuna's cards. Karna wants to find the position to insert the card. So help him to find the position to insert a certain card. If Karna inserts a card in a position other than the position of 5 cards, the game will be over. So play carefully.

For example, consider an array having three elements in it initially and a\[0] = 1, a\[1] = 2 and a\[2] = 3 and you want to insert a number 45 at location 1 i.e. a\[0] = 45, so we have to move elements one step below after insertion a\[1] = 1, and a\[2] = 2 and a\[3] = 3.

Input Format

The input consists of four integers. The first input corresponds to the size of an array. The second input corresponds to the array elements. The third input corresponds to the location where you wish to insert an element. The fourth input corresponds to the element to be inserted.

Constraints

NA

Output Format

The output consists of array elements in a format after insertion. If the position where the element has to be inserted is greater than size of the array, then print Invalid Input.

Sample Input 0

5
1
2
3
4
5
4
10
Sample Output 0

Array after insertion is
1
2
3
10
4
5
Sample Input 1

4
1
2
3
4
8
Sample Output 1

Invalid Input


--import java.util.*;

public class InsertCard {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

         int size = sc.nextInt();
        int[] arr = new int[size + 1]; 
       
        for (int i = 0; i < size; i++) {
            arr[i] = sc.nextInt();
        }

        
        int pos = sc.nextInt();  
        if (sc.hasNextInt()) {
            int elem = sc.nextInt();


            if (pos > size || pos < 0) {
                System.out.println("Invalid Input");
            } else 
               {

                    for (int i = size; i > pos; i--) {
                    arr[i] = arr[i - 1];
                }

                // Insert the new element
                arr[pos] = elem;

                System.out.println("Array after insertion is");
                for (int i = 0; i <= size; i++) {
                    System.out.println(arr[i]);
                }
            }
        } else {
            // If only 3 values given (no element to insert)
            System.out.println("Invalid Input");
        }

        sc.close();
    }
}

___________________
Jack and John were investigating a murder and the murderer was Ms.Isha Adler. She wanted Jack to find her by solving the puzzles. Jack was able to solve all but one. The last task was to write a program to remove duplicate elements from an array. Can you help Jack?

Input Format

Input consists of 1 integer and 1 array. The first integer corresponds to the size of the array. The next integers correspond to the elements in the array.

Constraints

NA

Output Format

The output consists of an array with no duplicate elements.

Sample Input 0

5
1
2
2
3
4
Sample Output 0

1
2
3
4
Explanation 0

Here, among the array elements, 1 is repeated twice, removing the duplicate ones we can print the remaining array elements. Hence the output is 1 5

Sample Input 1

4
3
2
1
2
Sample Output 1

3
2
1


--import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        int arr[] = {1, 1, 3, 3, 5};

        // Print the first element
        System.out.println(arr[0]);

        // Print only when current element != previous one
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[i - 1]) {
                System.out.println(arr[i]);
            }
        }
    }
}



















