2may impact Training
 
JAVA


Scanner - class
sc - object
new  Scanner(System.in)- we make reference while run time .while making the reference default method called.
println -next line 
printf()- formatted string ,args

Formated string 
%d - decimal
%f - float
%lf - double 
%e - exponential
%s - string
%S - uppercase string
%o- octal
%x - hexadecimal
%b - Boolean

-precision says by default 6 digit number after decimal
*Escape sequence: used to change the flow of output, sequence character not      printed , but it can change  the flow of output.



3rd May Impact Training

-Data Types
.primitive
*integer types
-byte(8bits)
-short(2)
-int(4)
-long(8)

*floating point numbers 
-float(4)
-double(8)

*char type
-char(2)

*Boolean - true,false


.non-primitive

TYPE CONVERSION
____________________________
-WIDENING:lower to higher type(implicit means automatically)
-NARROWING:higher to lower type(explicit means manually)

conditional statements 
----------------------------------

import java.util.Scanner;

public class TrendyNumberChecker {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Input: an integer n
        System.out.print("Enter a number: ");
        int n = sc.nextInt();

        // Check if it's a 3-digit number
        if (n >= 100 && n <= 999) {
            int middleDigit = (n / 10) % 10;  // Extract the middle digit
            
            if (middleDigit % 3 == 0) {
                System.out.println(n + " is a Trendy Number.");
            } else {
                System.out.println(n + " is Not a Trendy Number.");
            }
        } else {
            System.out.println("Not a 3-digit number, hence not a Trendy Number.");
        }

        sc.close();
    }
}




....import java.util.Scanner;

public class WeirdOrNot {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        if (n % 2 != 0) {
            System.out.println("Weird");
        } else {
            if (n >= 2 && n <= 5) {
                System.out.println("Not Weird");
            } else if (n >= 6 && n <= 20) {
                System.out.println("Weird");
            } else if (n > 20) {
                System.out.println("Not Weird");
            }
        }
    }
}

CONTROL STATEMENTS 
----------------------------------
for(cond.)
while(cond.)
do while


Q.write program to calculate the hotel tarrif .the room rent is 20% high during peak seasons april-june and nov- dec..   the first input  integer denote the count of the month the second input integer denote room rent per dat. the third input integr denote the nmber of days stayed in hotel  . output (print the hotel tariff to be piad ) java code  this is the hacker rank  contest - fundamentals of programming question answer accordingly.


Hotel Tariff Calculator

Write a  program to calculate the hotel tariff. The room rent is 20% high during peak seasons [April-June, November-December] .

Input Format:

The first line of the input contains an integer which corresponds to the number of the month. [ January is 1, Feb is 2 and so on].  

The second line of the input consists of a floating point number which corresponds to the room rent per day. 

The third line of the input consists of an integer which corresponds to the number of days stayed in the hotel.

Output Format:

Output consists of a single line which displays the hotel tariff to be payed.  

Hotel tariff should be displayed correct to 2 decimal places. 

Refer  sample output  for format details.

Sample Input 1:

3

1500

2

Sample Output 1:

Hotel Tariff: Rs.3000.00

Sample Input 2:

4

2000

2

Sample Output 2:

Hotel Tariff: Rs.4800.00

import java.util.Scanner;
public class Hotel
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        float b=sc.nextFloat();
        int c=sc.nextInt();
        if(a==4 ||a==6||a==11||a==12)
        {
            float d=20*b/100;
            float e=12*d;
            System.out.printf("Hotel Tariff:Rs.%.2f",e);
        }
        else if(a>12)
        {
            System.out.println("Invalid Input");
        }
        else
        {
            System.out.printf("Hotel Tariff:Rs.%.2f",b*c);
        }
    }
}


------------------------------------------------------------------------------------
PRINT EVEN AND ODD SUM

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int n = sc.nextInt();

        int evenSum = 0, oddSum = 0;

        while (n > 0) {
            int digit = n % 10;

            if (digit % 2 == 0) {
                evenSum += digit;
            } else {
                oddSum += digit;
            }

            n /= 10;
        }

        System.out.println("Even sum: " + evenSum);
        System.out.println("Odd sum: " + oddSum);

        sc.close();
    }
}


-------------------------------------------------------------------------------
Given a number num and a divisor m, print the nearest number less than or equal to num that is divisible by m.

import java.util.Scanner;
class Main{
    public static void main(String[] args) 
    {

        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number: ");
        int num = sc.nextInt();

        System.out.print("Enter the divisor (m): ");
        int m = sc.nextInt();

        if (m == 0) {
            System.out.println("Divisor cannot be zero.");
        } else {
            int result = num - (num % m);
            System.out.println("Nearest divisible number: " + result);
        }

        sc.close();
    }
}



                    OR
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the number and divisor
        System.out.print("Enter the number: ");
        int num = sc.nextInt();

        System.out.print("Enter the divisor (m): ");
        int m = sc.nextInt();

        if (m == 0) {
            System.out.println("Divisor cannot be zero.");
            return;
        }

       
        if (num % m == 0) {
            System.out.println("Nearest divisible number: " + num);
        } else {
            
            int lowerb = num - (num % m);
            int upperb = lowerb + m;

            if ((num - lowerb) <= (upperb - num)) {
                System.out.println("Nearest divisible number: " + lowerb);
            } else {
                System.out.println("Nearest divisible number: " + upperb);
            }
        }

        sc.close();
    }
}
---------------------------------------------------------------------------------------------------


find the sum of digits  of a number until the number becomes single digit  write a program ,input is a number, output consist of an integer
import java.util.Scanner;

public class DigitSumUntilSingleDigit {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter a number: ");
        int num = sc.nextInt();

        while (num >= 10) {
            int sum = 0;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            num = sum;
        }

        System.out.println(num);  // Final single-digit result

        sc.close();
    }
}







 www .haccerank.com/contests/fundamentals of programming/challenges/sum of digit-till-single-digit
------------------------------------------------------------------------------------------------------


8MAY 2025
adam num  the square of the given num is is equal to the reverse of the sqare of the reverse of the given number find the square of the number ,find revrese of the  number,then find square of the reverse number then find the sqaure of the reversed number then print this is the adam number




import java.util.Scanner;

public class AdamNumber {

    // Method to reverse a number
    public static int reverse(int num) {
        int rev = 0;
        while (num > 0) {
            rev = rev * 10 + (num % 10);
            num /= 10;
        }
        return rev;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        int square = num * num;
        int reversedNum = reverse(num);
        int reversedSquare = reversedNum * reversedNum;
        int reversedSquareOfReversed = reverse(reversedSquare);

        System.out.println("Original number: " + num);
        System.out.println("Square of the number: " + square);
        System.out.println("Reverse of the number: " + reversedNum);
        System.out.println("Square of reversed number: " + reversedSquare);
        System.out.println("Reverse of square of reversed number: " + reversedSquareOfReversed);

        if (square == reversedSquareOfReversed) {
            System.out.println(num + " is an Adam Number.");
        } else {
            System.out.println(num + " is NOT an Adam Number.");
        }

        scanner.close();
    }
}
-----------------------------------------------------
DIGIT MANIPULATION

Armstrong Number
163=1^3+6^3+3^3=sum
import java.util.Scanner;

public class ArmstrongNumber {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        int originalNum = num;
        int sum = 0;

        // Count number of digits
        int digits = 0;
        int temp = num;
        while (temp > 0) {
            digits++;
            temp /= 10;
        }

        // Calculate sum of digits raised to the power of digits
        temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            sum += (int)Math.pow(digit, digits);  // Cast result of Math.pow to int
            temp /= 10;
        }

        // Check if Armstrong
        if (sum == originalNum) {
            System.out.println(originalNum + " is an Armstrong Number.");
        } else {
            System.out.println(originalNum + " is NOT an Armstrong Number.");
        }

        scanner.close();
    }
}
----------------------------------------------------------------------------------------------



Jaffer wanted to excel in Math. He was learning about the Kaprekar number from Meena, his Maths teacher. She gave him a few random numbers and asked him to find out whether they are Kaprekar number or not.

(Consider an n-digit number k. Square it and add the right n digits to the left n or n-1 digits. If the resultant sum is k, then k is called a Kaprekar number. For example, 9 is a Kaprekar number since 9^2 = 81 & 8 + 1 = 9, similarly, 297 is a Kaprekar number as 297^2 = 88209 & 88 + 209 = 297 ).

Can you help Jaffer to write a program to find whether the given number is a Kaprekar number or not?

Input Format

Input consists of a single integer.

Constraints

NA

Output Format

If the output is a Kaprekar number print "Kaprekar Number" else "Not a Kaprekar Number".

Sample Input 0

45
Sample Output 0

Kaprekar Number
Sample Input 1

23
Sample Output 1

Not a Kaprekar Number



----
import java.util.Scanner;

public class KaprekarNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int num = scanner.nextInt();
        scanner.close();

        int square = num * num;

        // Count digits in original number
        int digits = 0;
        int temp = num;
        while (temp > 0) {
            digits++;
            temp /= 10;
        }

        // Get 10^digits
        int divisor = 1;
        for (int i = 0; i < digits; i++) {
            divisor *= 10;
        }

        int right = square % divisor;
        int left = square / divisor;

        if ((left + right) == num) {
            System.out.println("Kaprekar Number");
        } else {
            System.out.println("Not a Kaprekar Number");
        }
    }
}
A number can be said as a strong number when the sum of the factorial of the individual digits is equal to the number.

For example, 145 is a strong number. 1! + 4! + 5! = 145. Write a program to check whether a given number is a strong number or not.

Input Format

Input consists of 1 integer.

Constraints

NA

Output Format

If it is a strong number print "Yes" or print "No".

Sample Input 0

145
Sample Output 0

Yes
Explanation 0

= 1! + 4! +5! = 1+24+120 = 145



--
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int num = scanner.nextInt();
        int count =0;
        int sq=num*num;
        int temp=num;
        while(num!=0){
            count++;
        }
        int pow=(int) Math.pow(10,count);
        int right=sq % pow;
        int left=sq / pow;
        scanner.close();
        if((left+right)==temp){
            System.out.println("Kaprekar Number");
        } else 
        {
            System.out.println("Not a Kaprekar Number");
        }
        scanner.close();
    }
}

--------------------------------------------------------------------------------
[imp number pattern and type your name questions.]


NESTED LOOPS
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number: ");
        int rows = scanner.nextInt();
        scanner.close();

        
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
        
            System.out.println();
        }
    }
}














